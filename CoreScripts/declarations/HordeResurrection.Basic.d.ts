// <auto-generated/>

//#region ObjectsCounter
declare namespace HordeResurrection.Basic.Collections {
	class ObjectsCounter<T> extends System.Object {

		// Constructors:
		constructor(
			$T: any
		);

		// Properties:
		readonly TotalItems: number;

		// Indexer:
		readonly Item: $Indexer_ObjectsCounter<T>;

		// Methods:
		Increase(
			obj: T | null
		): void;

		Decrease(
			obj: T | null
		): void;

		Reset(): void;

		Count(
			obj: T | null
		): number;

		Contains(
			obj: T | null
		): boolean;

		GetKeys(
			listToFill: System.Collections.Generic.List<T> | null
		): void;

		// Some generics magic for TypeScript:
		private $ObjectsCounter_T: T;
	}

	/** This service type explains ClearScript access to .Net indexers. */
	abstract class $Indexer_ObjectsCounter<T> {
		/** [ obj: T ] -> number */
		public get(
			obj: T | null
		): number;
	}
}
//#endregion

//#region OrderedSet
declare namespace HordeResurrection.Basic.Collections {
	class OrderedSet<T> extends System.Object
		implements
			System.Collections.Generic.ICollection<T>,
			System.Collections.Generic.IEnumerable<T>,
			System.Collections.IEnumerable
	{
		// Constructors:
		constructor(
			$T: any
		);

		// Properties:
		readonly Count: number;
		readonly IsReadOnly: boolean;

		// Methods:
		Add(
			item: T | null
		): boolean;

		Clear(): void;

		Remove(
			item: T | null
		): boolean;

		GetEnumerator(): System.Collections.Generic.IEnumerator<T>;

		Contains(
			item: T | null
		): boolean;

		CopyTo(
			array: T[],
			arrayIndex: number
		): void;

		Add(
			item: T | null
		): void;

		GetEnumerator(): System.Collections.IEnumerator;

		// Some generics magic for TypeScript:
		private $OrderedSet_T: T;
	}
}
//#endregion

//#region ArraysPoolWrapper
declare namespace HordeResurrection.Basic.Pool {
	class ArraysPoolWrapper<TItem> extends System.Object {

		// Constructors:
		constructor(
			$TItem: any
		);

		// Some generics magic for TypeScript:
		private $ArraysPoolWrapper_TItem: TItem;
	}
}
//#endregion

//#region IPoolSlot
declare namespace HordeResurrection.Basic.Pool {
	interface IPoolSlot<T> {

		// Properties:
		readonly Object: T;

		// Methods:
		GetObjectOrNull(): T;

		GetObjectOrNull(): any;

		Dispose(): void;
	}
	/** TypeScript type stub for .Net interface */
	abstract class IPoolSlot<T> {}
}
//#endregion

//#region Pool
declare namespace HordeResurrection.Basic.Pool {
	class Pool<T> extends System.Object {

		// Constructors:
		constructor(
			$T: any,
			objectGenerator: System.Func_0<T> | System.Func | null
		);

		// Methods:
		Get(): HordeResurrection.Basic.Pool.PoolSlot<T>;

		Return(
			item: T | null
		): void;

		DebugFindDublicates(
			/*out*/ total: number,
			/*out*/ uniq: number,
			/*out*/ duplicates: number
		): boolean;

		// Some generics magic for TypeScript:
		private $Pool_T: T;
	}
}
//#endregion

//#region PoolSlot
declare namespace HordeResurrection.Basic.Pool {
	class /* struct */ PoolSlot<T> extends System.ValueType
		implements
			HordeResurrection.Basic.Pool.IPoolSlot<T>,
			System.IDisposable
	{
		// Constructors:
		constructor(
			$T: any,
			pool: HordeResurrection.Basic.Pool.Pool<T> | null,
			obj: T | null
		);

		// Properties:
		readonly Object: T;

		// Methods:
		GetObjectOrNull(): T;

		Dispose(): void;

		// Default parameterless constructor for value types
		constructor();

		// Some generics magic for TypeScript:
		private $PoolSlot_T: T;
	}
}
//#endregion

//#region Types shorthand
// ----------------------------------------------------- //
// ---------========= Types shorthand =========--------- //
// ----------------------------------------------------- //
/*
export const ObjectsCounter = HordeResurrection.Basic.Collections.ObjectsCounter;
export type ObjectsCounter<T> = HordeResurrection.Basic.Collections.ObjectsCounter<T>;
export const OrderedSet = HordeResurrection.Basic.Collections.OrderedSet;
export type OrderedSet<T> = HordeResurrection.Basic.Collections.OrderedSet<T>;
export const ArraysPoolWrapper = HordeResurrection.Basic.Pool.ArraysPoolWrapper;
export type ArraysPoolWrapper<TItem> = HordeResurrection.Basic.Pool.ArraysPoolWrapper<TItem>;
export const IPoolSlot = HordeResurrection.Basic.Pool.IPoolSlot;
export type IPoolSlot<T> = HordeResurrection.Basic.Pool.IPoolSlot<T>;
export const Pool = HordeResurrection.Basic.Pool.Pool;
export type Pool<T> = HordeResurrection.Basic.Pool.Pool<T>;
export const PoolSlot = HordeResurrection.Basic.Pool.PoolSlot;
export type PoolSlot<T> = HordeResurrection.Basic.Pool.PoolSlot<T>;
*/
//#endregion
