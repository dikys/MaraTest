// <auto-generated/>

//#region Box3D
declare namespace HordeResurrection.Basic.Primitives.Geometry {
	class /* struct */ Box3D extends System.ValueType
		implements System.IEquatable<HordeResurrection.Basic.Primitives.Geometry.Box3D>
	{
		// Constructors:
		constructor(
			x1: number,
			y1: number,
			z1: number,
			x2: number,
			y2: number,
			z2: number
		);

		// Fields:
		readonly X1: number;
		readonly Y1: number;
		readonly Z1: number;
		readonly X2: number;
		readonly Y2: number;
		readonly Z2: number;
		static readonly ZeroBox: HordeResurrection.Basic.Primitives.Geometry.Box3D;

		// Methods:
		Equals(
			other: HordeResurrection.Basic.Primitives.Geometry.Box3D
		): boolean;

		// Default parameterless constructor for value types
		constructor();
	}
}
//#endregion

//#region Direction4
declare namespace HordeResurrection.Basic.Primitives.Geometry {
	abstract class Direction4 extends System.Enum {
		/** Direction4.NoDirection = 0 */ static readonly NoDirection: Direction4;
		/** Direction4.Up = 1 */ static readonly Up: Direction4;
		/** Direction4.Right = 2 */ static readonly Right: Direction4;
		/** Direction4.Down = 3 */ static readonly Down: Direction4;
		/** Direction4.Left = 4 */ static readonly Left: Direction4;
	}
}
//#endregion

//#region Point2D
declare namespace HordeResurrection.Basic.Primitives.Geometry {
	class /* struct */ Point2D extends System.ValueType
		implements System.IEquatable<HordeResurrection.Basic.Primitives.Geometry.Point2D>
	{
		// Constructors:
		constructor(
			x: number,
			y: number
		);

		constructor(
			xy: number
		);

		constructor(
			size: HordeResurrection.Basic.Primitives.Geometry.Size2D
		);

		// Fields:
		readonly X: number;
		readonly Y: number;
		static readonly ZeroVector: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		static readonly UnitVector: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		static readonly NegativeUnitVector: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		static readonly Neighbors4: HordeResurrection.Basic.Primitives.Geometry.Point2D[];
		static readonly Neighbors8: HordeResurrection.Basic.Primitives.Geometry.Point2D[];

		// Properties:
		readonly XPropertyForConfigurator: number;
		readonly YPropertyForConfigurator: number;

		// Methods:
		GetEuclidDistanceSquared(
			point: HordeResurrection.Basic.Primitives.Geometry.Point2D
		): number;

		GetEuclidDistance(
			point: HordeResurrection.Basic.Primitives.Geometry.Point2D
		): number;

		GetEuclidDistanceInt(
			point: HordeResurrection.Basic.Primitives.Geometry.Point2D
		): number;

		GetChebyshevDistance(
			point: HordeResurrection.Basic.Primitives.Geometry.Point2D
		): number;

		GetMinkowskiDistance(
			point: HordeResurrection.Basic.Primitives.Geometry.Point2D
		): number;

		InBox(
			start: HordeResurrection.Basic.Primitives.Geometry.Point2D,
			end: HordeResurrection.Basic.Primitives.Geometry.Point2D
		): boolean;

		InBox(
			start: HordeResurrection.Basic.Primitives.Geometry.Point2D,
			size: HordeResurrection.Basic.Primitives.Geometry.Size2D
		): boolean;

		IsUnitVector(): boolean;

		GetEuclideNorm(): number;

		GetEuclideNormSquared(): number;

		ToPreciseFractionVector(): HordeResurrection.Basic.Primitives.Geometry.PreciseFractionVector;

		FillNeighborPointsSet(
			withCenter: boolean,
			targetPointsSet: System.Collections.Generic.HashSet<HordeResurrection.Basic.Primitives.Geometry.Point2D> | null
		): void;

		NormalizeChebushev(): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		NormalizeEuclid(): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		AbsClamp(
			bound: number
		): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		Equals(
			other: HordeResurrection.Basic.Primitives.Geometry.Point2D
		): boolean;

		Deconstruct(
			/*out*/ x: number,
			/*out*/ y: number
		): void;

		// Default parameterless constructor for value types
		constructor();
	}
}
//#endregion

//#region PreciseFractionVector
declare namespace HordeResurrection.Basic.Primitives.Geometry {
	class /* struct */ PreciseFractionVector extends System.ValueType
		implements System.IEquatable<HordeResurrection.Basic.Primitives.Geometry.PreciseFractionVector>
	{
		// Constructors:
		constructor(
			x: HordeResurrection.Basic.Primitives.PreciseFraction,
			y: HordeResurrection.Basic.Primitives.PreciseFraction
		);

		constructor(
			x: number,
			y: number
		);

		constructor(
			x: number,
			y: number
		);

		constructor(
			point: HordeResurrection.Basic.Primitives.Geometry.Point2D
		);

		// Fields:
		readonly X: HordeResurrection.Basic.Primitives.PreciseFraction;
		readonly Y: HordeResurrection.Basic.Primitives.PreciseFraction;
		static readonly Zero: HordeResurrection.Basic.Primitives.Geometry.PreciseFractionVector;
		static readonly Unit: HordeResurrection.Basic.Primitives.Geometry.PreciseFractionVector;

		// Properties:
		readonly XPropertyForConfigurator: HordeResurrection.Basic.Primitives.PreciseFraction;
		readonly YPropertyForConfigurator: HordeResurrection.Basic.Primitives.PreciseFraction;

		// Methods:
		GetNormChebushev(): HordeResurrection.Basic.Primitives.PreciseFraction;

		ToPoint2D(): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		AbsClamp(
			bound: HordeResurrection.Basic.Primitives.PreciseFraction
		): HordeResurrection.Basic.Primitives.Geometry.PreciseFractionVector;

		Equals(
			other: HordeResurrection.Basic.Primitives.Geometry.PreciseFractionVector
		): boolean;

		// Default parameterless constructor for value types
		constructor();
	}
}
//#endregion

//#region Rect2D
declare namespace HordeResurrection.Basic.Primitives.Geometry {
	class /* struct */ Rect2D extends System.ValueType
		implements System.IEquatable<HordeResurrection.Basic.Primitives.Geometry.Rect2D>
	{
		// Constructors:
		constructor(
			x: number,
			y: number,
			width: number,
			height: number
		);

		constructor(
			topLeft: HordeResurrection.Basic.Primitives.Geometry.Point2D,
			width: number,
			height: number
		);

		constructor(
			topLeft: HordeResurrection.Basic.Primitives.Geometry.Point2D,
			size: HordeResurrection.Basic.Primitives.Geometry.Size2D
		);

		constructor(
			otherRect: HordeResurrection.Basic.Primitives.Geometry.Rect2D
		);

		constructor(
			point1: HordeResurrection.Basic.Primitives.Geometry.Point2D,
			point2: HordeResurrection.Basic.Primitives.Geometry.Point2D
		);

		constructor(
			size: HordeResurrection.Basic.Primitives.Geometry.Size2D
		);

		// Fields:
		readonly X: number;
		readonly Y: number;
		readonly Width: number;
		readonly Height: number;
		static readonly EmptyRect: HordeResurrection.Basic.Primitives.Geometry.Rect2D;
		static readonly UnitRect: HordeResurrection.Basic.Primitives.Geometry.Rect2D;

		// Properties:
		readonly Left: number;
		readonly Top: number;
		readonly Right: number;
		readonly Bottom: number;
		readonly Location: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		readonly Center: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		readonly Size: HordeResurrection.Basic.Primitives.Geometry.Size2D;
		readonly IsEmpty: boolean;
		readonly IsPrime: boolean;
		readonly IsZero: boolean;
		readonly Area: number;
		readonly TopLeft: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		readonly TopRight: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		readonly TopRightInside: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		readonly BottomLeft: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		readonly BottomLeftInside: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		readonly BottomRight: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		readonly BottomRightInside: HordeResurrection.Basic.Primitives.Geometry.Point2D;

		// Methods:
		static CreateByCorners(
			x1: number,
			y1: number,
			x2: number,
			y2: number
		): HordeResurrection.Basic.Primitives.Geometry.Rect2D;

		static CreateByRadius(
			center: HordeResurrection.Basic.Primitives.Geometry.Point2D,
			radius: number
		): HordeResurrection.Basic.Primitives.Geometry.Rect2D;

		Expand(
			left: number,
			right: number,
			top: number,
			bottom: number
		): HordeResurrection.Basic.Primitives.Geometry.Rect2D;

		Expand(
			allSides: number
		): HordeResurrection.Basic.Primitives.Geometry.Rect2D;

		GetEdgePoints(): System.Collections.Generic.HashSet<HordeResurrection.Basic.Primitives.Geometry.Point2D>;

		GetEdgePoints(
			targetPointsSet: System.Collections.Generic.HashSet<HordeResurrection.Basic.Primitives.Geometry.Point2D> | null
		): void;

		GetAllPoints(
			pointSet: System.Collections.Generic.HashSet<HordeResurrection.Basic.Primitives.Geometry.Point2D> | null
		): void;

		Contains(
			point: HordeResurrection.Basic.Primitives.Geometry.Point2D
		): boolean;

		Overlap(
			other: HordeResurrection.Basic.Primitives.Geometry.Rect2D
		): boolean;

		ForEachEdgePoint(
			callback: System.Func_1<HordeResurrection.Basic.Primitives.Geometry.Point2D, boolean> | System.Func | null
		): void;

		Equals(
			other: HordeResurrection.Basic.Primitives.Geometry.Rect2D
		): boolean;

		// Default parameterless constructor for value types
		constructor();
	}
}
//#endregion

//#region Size2D
declare namespace HordeResurrection.Basic.Primitives.Geometry {
	class /* struct */ Size2D extends System.ValueType
		implements System.IEquatable<HordeResurrection.Basic.Primitives.Geometry.Size2D>
	{
		// Constructors:
		constructor(
			width: number,
			height: number
		);

		constructor(
			widthHeight: number
		);

		constructor(
			point: HordeResurrection.Basic.Primitives.Geometry.Point2D
		);

		// Fields:
		readonly Width: number;
		readonly Height: number;
		static readonly ZeroSize: HordeResurrection.Basic.Primitives.Geometry.Size2D;
		static readonly Size1x1: HordeResurrection.Basic.Primitives.Geometry.Size2D;

		// Properties:
		readonly Area: number;
		readonly WidthPropertyForConfigurator: number;
		readonly HeightPropertyForConfigurator: number;

		// Methods:
		ToPoint2D(): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		Equals(
			other: HordeResurrection.Basic.Primitives.Geometry.Size2D
		): boolean;

		// Default parameterless constructor for value types
		constructor();
	}
}
//#endregion

//#region HordeColor
declare namespace HordeResurrection.Basic.Primitives {
	class HordeColor extends System.Object {

		// Constructors:
		constructor();

		constructor(
			r: number,
			g: number,
			b: number
		);

		constructor(
			a: number,
			r: number,
			g: number,
			b: number
		);

		constructor(
			other: HordeResurrection.Basic.Primitives.HordeColor | null
		);

		// Fields:
		A: number;
		R: number;
		G: number;
		B: number;
		static readonly White: HordeResurrection.Basic.Primitives.HordeColor;
		static readonly Black: HordeResurrection.Basic.Primitives.HordeColor;

		// Properties:
		readonly RPropertyForConfigurator: number;
		readonly GPropertyForConfigurator: number;
		readonly BPropertyForConfigurator: number;
		readonly APropertyForConfigurator: number;

		// Methods:
		ChangeBrightness(
			v: number
		): HordeResurrection.Basic.Primitives.HordeColor;

		ToBgra(): number;

		ToRgba(): number;

		static FromBgra(
			rgba: number
		): HordeResurrection.Basic.Primitives.HordeColor;

		static FromRgba(
			array: number[] | null
		): HordeResurrection.Basic.Primitives.HordeColor;
	}
}
//#endregion

//#region HordeRandomizer
declare namespace HordeResurrection.Basic.Primitives {
	class HordeRandomizer extends System.Object {

		// Constructors:
		constructor();

		constructor(
			seed: number
		);

		// Properties:
		static readonly Static: HordeResurrection.Basic.Primitives.HordeRandomizer;
		readonly Seed: number;
		readonly UsesCount: number;

		// Methods:
		ChangeSeed(
			seed: number
		): void;

		RandomNumber(): number;

		RandomNumber(
			min: number,
			max: number
		): number;

		RandomLong(): number;

		RandomLong(
			min: number,
			max: number
		): number;

		RandomDouble(): number;

		GetRandomBool(): boolean;

		CheckProbability(
			probability: number
		): boolean;

		GetRandomElement<T>(
			$T: any,
			list: System.Collections.Generic.IList<T> | null
		): T;

		GetRandomElement<T>(
			$T: any,
			collection: System.Collections.Generic.ICollection<T> | null
		): T;

		GetRandomElement<T>(
			$T: any,
			enumerable: System.Collections.Generic.IEnumerable<T> | null,
			count: number
		): T;

		RandomPreciseFraction(
			min: HordeResurrection.Basic.Primitives.PreciseFraction,
			max: HordeResurrection.Basic.Primitives.PreciseFraction
		): HordeResurrection.Basic.Primitives.PreciseFraction;

		RandomPointInRadius(
			radius: number,
			allowZeroPoint?: boolean /* = true */
		): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		RandomPointInRadius(
			radiusX: number,
			radiusY: number,
			allowZeroPoint?: boolean /* = true */
		): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		RandomPointInRect(
			rect: HordeResurrection.Basic.Primitives.Geometry.Rect2D
		): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		RandomRectInRect(
			rect: HordeResurrection.Basic.Primitives.Geometry.Rect2D
		): HordeResurrection.Basic.Primitives.Geometry.Rect2D;
	}
}
//#endregion

//#region HordeSpeedHandler
declare namespace HordeResurrection.Basic.Primitives {
	class HordeSpeedHandler extends System.Object {

		// Constructors:
		constructor(
			moveVector: HordeResurrection.Basic.Primitives.Geometry.Point2D,
			speed: HordeResurrection.Basic.Primitives.PreciseFraction
		);

		// Properties:
		readonly SpeedX: HordeResurrection.Basic.Primitives.PreciseFraction;
		readonly SpeedY: HordeResurrection.Basic.Primitives.PreciseFraction;
		readonly SpeedRestX: HordeResurrection.Basic.Primitives.PreciseFraction;
		readonly SpeedRestY: HordeResurrection.Basic.Primitives.PreciseFraction;

		// Methods:
		ApplyToPoint(
			position: HordeResurrection.Basic.Primitives.Geometry.Point2D,
			finishPoint: HordeResurrection.Basic.Primitives.Geometry.Point2D
		): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		ResetRest(): void;
	}
}
//#endregion

//#region MinMaxSpan
declare namespace HordeResurrection.Basic.Primitives {
	class /* struct */ MinMaxSpan extends System.ValueType {

		// Constructors:
		constructor(
			min: number,
			max: number
		);

		// Properties:
		readonly Min: number;
		readonly Max: number;

		// Default parameterless constructor for value types
		constructor();
	}
}
//#endregion

//#region PreciseFraction
declare namespace HordeResurrection.Basic.Primitives {
	class /* struct */ PreciseFraction extends System.ValueType {

		// Constructors:
		constructor(
			i: number,
			f: number
		);

		constructor(
			d: number
		);

		constructor(
			d: number
		);

		// Fields:
		static readonly StringFormat: string;
		static readonly Zero: HordeResurrection.Basic.Primitives.PreciseFraction;
		static readonly One: HordeResurrection.Basic.Primitives.PreciseFraction;
		static readonly /* const */ Precision: number; // = 1000
		static readonly /* const */ ValueFieldName: string; // = "_value"

		// Properties:
		readonly Sign: number;
		readonly Integer: number;
		readonly Fraction: number;
		readonly AsDecimal: number;
		readonly AsDouble: number;
		readonly AsFloat: number;

		// Methods:
		Ceiling(): HordeResurrection.Basic.Primitives.PreciseFraction;

		Floor(): HordeResurrection.Basic.Primitives.PreciseFraction;

		Clamp(
			minBound: HordeResurrection.Basic.Primitives.PreciseFraction,
			maxBound: HordeResurrection.Basic.Primitives.PreciseFraction
		): HordeResurrection.Basic.Primitives.PreciseFraction;

		// Default parameterless constructor for value types
		constructor();
	}
}
//#endregion

//#region SpiralOut
declare namespace HordeResurrection.Basic.Primitives {
	class SpiralOut extends System.Object {

		// Constructors:
		constructor(
			center?: HordeResurrection.Basic.Primitives.Geometry.Point2D | null /* = null */,
			stepSize?: HordeResurrection.Basic.Primitives.Geometry.Size2D | null /* = null */,
			startDirection?: HordeResurrection.Basic.Primitives.SpiralOut.SpiralDirection /* = SpiralDirection.Right */,
			clockwise?: boolean /* = true */
		);

		// Fields:
		static readonly SpiralDirectionsCount: number;

		// Properties:
		readonly Center: HordeResurrection.Basic.Primitives.Geometry.Point2D;
		readonly StepSize: HordeResurrection.Basic.Primitives.Geometry.Size2D;
		readonly Length: number;
		readonly IsClockwise: boolean;
		readonly StartDirection: HordeResurrection.Basic.Primitives.SpiralOut.SpiralDirection;

		// Methods:
		static GetRandomSpiral(
			randomizer: HordeResurrection.Basic.Primitives.HordeRandomizer | null,
			center?: HordeResurrection.Basic.Primitives.Geometry.Point2D | null /* = null */,
			stepSize?: HordeResurrection.Basic.Primitives.Geometry.Size2D | null /* = null */
		): HordeResurrection.Basic.Primitives.SpiralOut;

		GoNext(): void;

		GetCurrentPoint(): HordeResurrection.Basic.Primitives.Geometry.Point2D;

		static CountSpiralLength(
			radius: number
		): number;

		static NextDirection(
			direction: HordeResurrection.Basic.Primitives.SpiralOut.SpiralDirection,
			clockwise: boolean
		): HordeResurrection.Basic.Primitives.SpiralOut.SpiralDirection;
	}
}
//#endregion

//#region SpiralOut.SpiralDirection
declare namespace HordeResurrection.Basic.Primitives.SpiralOut {
	abstract class SpiralDirection extends System.Enum {
		/** SpiralDirection.Right = 0 */ static readonly Right: SpiralDirection;
		/** SpiralDirection.Down = 1 */ static readonly Down: SpiralDirection;
		/** SpiralDirection.Left = 2 */ static readonly Left: SpiralDirection;
		/** SpiralDirection.Up = 3 */ static readonly Up: SpiralDirection;
	}
}
//#endregion

//#region Types shorthand
// ----------------------------------------------------- //
// ---------========= Types shorthand =========--------- //
// ----------------------------------------------------- //
/*
export const Box3D = HordeResurrection.Basic.Primitives.Geometry.Box3D;
export type Box3D = HordeResurrection.Basic.Primitives.Geometry.Box3D;
export const Direction4 = HordeResurrection.Basic.Primitives.Geometry.Direction4;
export type Direction4 = HordeResurrection.Basic.Primitives.Geometry.Direction4;
export const Point2D = HordeResurrection.Basic.Primitives.Geometry.Point2D;
export type Point2D = HordeResurrection.Basic.Primitives.Geometry.Point2D;
export const PreciseFractionVector = HordeResurrection.Basic.Primitives.Geometry.PreciseFractionVector;
export type PreciseFractionVector = HordeResurrection.Basic.Primitives.Geometry.PreciseFractionVector;
export const Rect2D = HordeResurrection.Basic.Primitives.Geometry.Rect2D;
export type Rect2D = HordeResurrection.Basic.Primitives.Geometry.Rect2D;
export const Size2D = HordeResurrection.Basic.Primitives.Geometry.Size2D;
export type Size2D = HordeResurrection.Basic.Primitives.Geometry.Size2D;
export const HordeColor = HordeResurrection.Basic.Primitives.HordeColor;
export type HordeColor = HordeResurrection.Basic.Primitives.HordeColor;
export const HordeRandomizer = HordeResurrection.Basic.Primitives.HordeRandomizer;
export type HordeRandomizer = HordeResurrection.Basic.Primitives.HordeRandomizer;
export const HordeSpeedHandler = HordeResurrection.Basic.Primitives.HordeSpeedHandler;
export type HordeSpeedHandler = HordeResurrection.Basic.Primitives.HordeSpeedHandler;
export const MinMaxSpan = HordeResurrection.Basic.Primitives.MinMaxSpan;
export type MinMaxSpan = HordeResurrection.Basic.Primitives.MinMaxSpan;
export const PreciseFraction = HordeResurrection.Basic.Primitives.PreciseFraction;
export type PreciseFraction = HordeResurrection.Basic.Primitives.PreciseFraction;
export const SpiralOut = HordeResurrection.Basic.Primitives.SpiralOut;
export type SpiralOut = HordeResurrection.Basic.Primitives.SpiralOut;
export const SpiralDirection = HordeResurrection.Basic.Primitives.SpiralOut.SpiralDirection;
export type SpiralDirection = HordeResurrection.Basic.Primitives.SpiralOut.SpiralDirection;
*/
//#endregion
