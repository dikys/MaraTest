// <auto-generated/>

//#region Rectangle
declare namespace Stride.Core.Mathematics {
	class /* struct */ Rectangle extends System.ValueType
		implements System.IEquatable<Stride.Core.Mathematics.Rectangle>
	{
		// Constructors:
		constructor(
			x: number,
			y: number,
			width: number,
			height: number
		);

		// Fields:
		X: number;
		Y: number;
		Width: number;
		Height: number;
		static readonly Empty: Stride.Core.Mathematics.Rectangle;

		// Properties:
		Left: number;
		Top: number;
		readonly Right: number;
		readonly Bottom: number;
		readonly IsEmpty: boolean;

		// Methods:
		Offset(
			offsetX: number,
			offsetY: number
		): void;

		Inflate(
			horizontalAmount: number,
			verticalAmount: number
		): void;

		Contains(
			x: number,
			y: number
		): boolean;

		Contains(
			value: Stride.Core.Mathematics.Rectangle
		): boolean;

		Contains(
			/*in*/ value: Stride.Core.Mathematics.Rectangle,
			/*out*/ result: boolean
		): void;

		Contains(
			x: number,
			y: number
		): boolean;

		Contains(
			vector2D: Stride.Core.Mathematics.Vector2
		): boolean;

		Intersects(
			value: Stride.Core.Mathematics.Rectangle
		): boolean;

		Intersects(
			/*in*/ value: Stride.Core.Mathematics.Rectangle,
			/*out*/ result: boolean
		): void;

		static Intersect(
			value1: Stride.Core.Mathematics.Rectangle,
			value2: Stride.Core.Mathematics.Rectangle
		): Stride.Core.Mathematics.Rectangle;

		static Intersect(
			/*in*/ value1: Stride.Core.Mathematics.Rectangle,
			/*in*/ value2: Stride.Core.Mathematics.Rectangle,
			/*out*/ result: Stride.Core.Mathematics.Rectangle
		): void;

		static Union(
			value1: Stride.Core.Mathematics.Rectangle,
			value2: Stride.Core.Mathematics.Rectangle
		): Stride.Core.Mathematics.Rectangle;

		static Union(
			/*in*/ value1: Stride.Core.Mathematics.Rectangle,
			/*in*/ value2: Stride.Core.Mathematics.Rectangle,
			/*out*/ result: Stride.Core.Mathematics.Rectangle
		): void;

		Equals(
			other: Stride.Core.Mathematics.Rectangle
		): boolean;

		// Default parameterless constructor for value types
		constructor();
	}
}
//#endregion

//#region Vector2
declare namespace Stride.Core.Mathematics {
	class /* struct */ Vector2 extends System.ValueType
		implements System.IEquatable<Stride.Core.Mathematics.Vector2>
	{
		// Constructors:
		constructor(
			value: number
		);

		constructor(
			x: number,
			y: number
		);

		constructor(
			values: number[]
		);

		// Fields:
		X: number;
		Y: number;
		static readonly SizeInBytes: number;
		static readonly Zero: Stride.Core.Mathematics.Vector2;
		static readonly UnitX: Stride.Core.Mathematics.Vector2;
		static readonly UnitY: Stride.Core.Mathematics.Vector2;
		static readonly One: Stride.Core.Mathematics.Vector2;

		// Properties:
		readonly IsNormalized: boolean;

		// Indexer:
		readonly Item: $Indexer_Vector2;

		// Methods:
		Length(): number;

		LengthSquared(): number;

		Normalize(): void;

		ToArray(): number[];

		static MoveTo(
			/*in*/ from: Stride.Core.Mathematics.Vector2,
			/*in*/ to: Stride.Core.Mathematics.Vector2,
			maxTravelDistance: number
		): Stride.Core.Mathematics.Vector2;

		static Add(
			/*in*/ left: Stride.Core.Mathematics.Vector2,
			/*in*/ right: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Add(
			left: Stride.Core.Mathematics.Vector2,
			right: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Subtract(
			/*in*/ left: Stride.Core.Mathematics.Vector2,
			/*in*/ right: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Subtract(
			/*in*/ left: Stride.Core.Mathematics.Vector2,
			/*in*/ right: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Multiply(
			/*in*/ value: Stride.Core.Mathematics.Vector2,
			scale: number,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Multiply(
			value: Stride.Core.Mathematics.Vector2,
			scale: number
		): Stride.Core.Mathematics.Vector2;

		static Modulate(
			/*in*/ left: Stride.Core.Mathematics.Vector2,
			/*in*/ right: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Modulate(
			left: Stride.Core.Mathematics.Vector2,
			right: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Divide(
			/*in*/ value: Stride.Core.Mathematics.Vector2,
			scale: number,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Divide(
			value: Stride.Core.Mathematics.Vector2,
			scale: number
		): Stride.Core.Mathematics.Vector2;

		static Demodulate(
			/*in*/ left: Stride.Core.Mathematics.Vector2,
			/*in*/ right: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Demodulate(
			left: Stride.Core.Mathematics.Vector2,
			right: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Negate(
			/*in*/ value: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Negate(
			value: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Barycentric(
			/*in*/ value1: Stride.Core.Mathematics.Vector2,
			/*in*/ value2: Stride.Core.Mathematics.Vector2,
			/*in*/ value3: Stride.Core.Mathematics.Vector2,
			amount1: number,
			amount2: number,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Barycentric(
			value1: Stride.Core.Mathematics.Vector2,
			value2: Stride.Core.Mathematics.Vector2,
			value3: Stride.Core.Mathematics.Vector2,
			amount1: number,
			amount2: number
		): Stride.Core.Mathematics.Vector2;

		static Clamp(
			/*in*/ value: Stride.Core.Mathematics.Vector2,
			/*in*/ min: Stride.Core.Mathematics.Vector2,
			/*in*/ max: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Clamp(
			value: Stride.Core.Mathematics.Vector2,
			min: Stride.Core.Mathematics.Vector2,
			max: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Distance(
			/*in*/ value1: Stride.Core.Mathematics.Vector2,
			/*in*/ value2: Stride.Core.Mathematics.Vector2,
			/*out*/ result: number
		): void;

		static Distance(
			value1: Stride.Core.Mathematics.Vector2,
			value2: Stride.Core.Mathematics.Vector2
		): number;

		static DistanceSquared(
			/*in*/ value1: Stride.Core.Mathematics.Vector2,
			/*in*/ value2: Stride.Core.Mathematics.Vector2,
			/*out*/ result: number
		): void;

		static DistanceSquared(
			value1: Stride.Core.Mathematics.Vector2,
			value2: Stride.Core.Mathematics.Vector2
		): number;

		static Dot(
			/*in*/ left: Stride.Core.Mathematics.Vector2,
			/*in*/ right: Stride.Core.Mathematics.Vector2,
			/*out*/ result: number
		): void;

		static Dot(
			left: Stride.Core.Mathematics.Vector2,
			right: Stride.Core.Mathematics.Vector2
		): number;

		static Normalize(
			/*in*/ value: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Normalize(
			value: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Lerp(
			/*in*/ start: Stride.Core.Mathematics.Vector2,
			/*in*/ end: Stride.Core.Mathematics.Vector2,
			amount: number,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Lerp(
			start: Stride.Core.Mathematics.Vector2,
			end: Stride.Core.Mathematics.Vector2,
			amount: number
		): Stride.Core.Mathematics.Vector2;

		static SmoothStep(
			/*in*/ start: Stride.Core.Mathematics.Vector2,
			/*in*/ end: Stride.Core.Mathematics.Vector2,
			amount: number,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static SmoothStep(
			start: Stride.Core.Mathematics.Vector2,
			end: Stride.Core.Mathematics.Vector2,
			amount: number
		): Stride.Core.Mathematics.Vector2;

		static Hermite(
			/*in*/ value1: Stride.Core.Mathematics.Vector2,
			/*in*/ tangent1: Stride.Core.Mathematics.Vector2,
			/*in*/ value2: Stride.Core.Mathematics.Vector2,
			/*in*/ tangent2: Stride.Core.Mathematics.Vector2,
			amount: number,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Hermite(
			value1: Stride.Core.Mathematics.Vector2,
			tangent1: Stride.Core.Mathematics.Vector2,
			value2: Stride.Core.Mathematics.Vector2,
			tangent2: Stride.Core.Mathematics.Vector2,
			amount: number
		): Stride.Core.Mathematics.Vector2;

		static CatmullRom(
			/*in*/ value1: Stride.Core.Mathematics.Vector2,
			/*in*/ value2: Stride.Core.Mathematics.Vector2,
			/*in*/ value3: Stride.Core.Mathematics.Vector2,
			/*in*/ value4: Stride.Core.Mathematics.Vector2,
			amount: number,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static CatmullRom(
			value1: Stride.Core.Mathematics.Vector2,
			value2: Stride.Core.Mathematics.Vector2,
			value3: Stride.Core.Mathematics.Vector2,
			value4: Stride.Core.Mathematics.Vector2,
			amount: number
		): Stride.Core.Mathematics.Vector2;

		static Max(
			/*in*/ left: Stride.Core.Mathematics.Vector2,
			/*in*/ right: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Max(
			left: Stride.Core.Mathematics.Vector2,
			right: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Min(
			/*in*/ left: Stride.Core.Mathematics.Vector2,
			/*in*/ right: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Min(
			left: Stride.Core.Mathematics.Vector2,
			right: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Reflect(
			/*in*/ vector: Stride.Core.Mathematics.Vector2,
			/*in*/ normal: Stride.Core.Mathematics.Vector2,
			/*out*/ result: Stride.Core.Mathematics.Vector2
		): void;

		static Reflect(
			vector: Stride.Core.Mathematics.Vector2,
			normal: Stride.Core.Mathematics.Vector2
		): Stride.Core.Mathematics.Vector2;

		static Orthogonalize(
			destination: Stride.Core.Mathematics.Vector2[],
			source: Stride.Core.Mathematics.Vector2[]
		): void;

		static Orthonormalize(
			destination: Stride.Core.Mathematics.Vector2[],
			source: Stride.Core.Mathematics.Vector2[]
		): void;

		ToString(
			format: string | null
		): string;

		EqualsStrict(
			other: Stride.Core.Mathematics.Vector2
		): boolean;

		Equals(
			other: Stride.Core.Mathematics.Vector2
		): boolean;

		Deconstruct(
			/*out*/ x: number,
			/*out*/ y: number
		): void;

		ToString(): string;

		// Default parameterless constructor for value types
		constructor();
	}

	/** This service type explains ClearScript access to .Net indexers. */
	abstract class $Indexer_Vector2 {
		/** [ index: number ] -> number */
		public get(
			index: number
		): number;

		/** [ index: number ] <- number */
		public set(
			index: number,
			value: number
		): void;
	}
}
//#endregion

//#region Color
declare namespace Stride.Core.Mathematics {
	class /* struct */ Color extends System.ValueType
		implements System.IEquatable<Stride.Core.Mathematics.Color>
	{
		// Constructors:
		constructor(
			value: number
		);

		constructor(
			value: number
		);

		constructor(
			red: number,
			green: number,
			blue: number,
			alpha: number
		);

		constructor(
			red: number,
			green: number,
			blue: number
		);

		constructor(
			red: number,
			green: number,
			blue: number,
			alpha: number
		);

		constructor(
			red: number,
			green: number,
			blue: number
		);

		constructor(
			rgba: number
		);

		constructor(
			rgba: number
		);

		constructor(
			values: number[]
		);

		constructor(
			values: number[]
		);

		// Fields:
		R: number;
		G: number;
		B: number;
		A: number;
		static readonly Zero: Stride.Core.Mathematics.Color;
		static readonly Transparent: Stride.Core.Mathematics.Color;
		static readonly AliceBlue: Stride.Core.Mathematics.Color;
		static readonly AntiqueWhite: Stride.Core.Mathematics.Color;
		static readonly Aqua: Stride.Core.Mathematics.Color;
		static readonly Aquamarine: Stride.Core.Mathematics.Color;
		static readonly Azure: Stride.Core.Mathematics.Color;
		static readonly Beige: Stride.Core.Mathematics.Color;
		static readonly Bisque: Stride.Core.Mathematics.Color;
		static readonly Black: Stride.Core.Mathematics.Color;
		static readonly BlanchedAlmond: Stride.Core.Mathematics.Color;
		static readonly Blue: Stride.Core.Mathematics.Color;
		static readonly BlueViolet: Stride.Core.Mathematics.Color;
		static readonly Brown: Stride.Core.Mathematics.Color;
		static readonly BurlyWood: Stride.Core.Mathematics.Color;
		static readonly CadetBlue: Stride.Core.Mathematics.Color;
		static readonly Chartreuse: Stride.Core.Mathematics.Color;
		static readonly Chocolate: Stride.Core.Mathematics.Color;
		static readonly Coral: Stride.Core.Mathematics.Color;
		static readonly CornflowerBlue: Stride.Core.Mathematics.Color;
		static readonly Cornsilk: Stride.Core.Mathematics.Color;
		static readonly Crimson: Stride.Core.Mathematics.Color;
		static readonly Cyan: Stride.Core.Mathematics.Color;
		static readonly DarkBlue: Stride.Core.Mathematics.Color;
		static readonly DarkCyan: Stride.Core.Mathematics.Color;
		static readonly DarkGoldenrod: Stride.Core.Mathematics.Color;
		static readonly DarkGray: Stride.Core.Mathematics.Color;
		static readonly DarkGreen: Stride.Core.Mathematics.Color;
		static readonly DarkKhaki: Stride.Core.Mathematics.Color;
		static readonly DarkMagenta: Stride.Core.Mathematics.Color;
		static readonly DarkOliveGreen: Stride.Core.Mathematics.Color;
		static readonly DarkOrange: Stride.Core.Mathematics.Color;
		static readonly DarkOrchid: Stride.Core.Mathematics.Color;
		static readonly DarkRed: Stride.Core.Mathematics.Color;
		static readonly DarkSalmon: Stride.Core.Mathematics.Color;
		static readonly DarkSeaGreen: Stride.Core.Mathematics.Color;
		static readonly DarkSlateBlue: Stride.Core.Mathematics.Color;
		static readonly DarkSlateGray: Stride.Core.Mathematics.Color;
		static readonly DarkTurquoise: Stride.Core.Mathematics.Color;
		static readonly DarkViolet: Stride.Core.Mathematics.Color;
		static readonly DeepPink: Stride.Core.Mathematics.Color;
		static readonly DeepSkyBlue: Stride.Core.Mathematics.Color;
		static readonly DimGray: Stride.Core.Mathematics.Color;
		static readonly VeryDimGray: Stride.Core.Mathematics.Color;
		static readonly DodgerBlue: Stride.Core.Mathematics.Color;
		static readonly Firebrick: Stride.Core.Mathematics.Color;
		static readonly FloralWhite: Stride.Core.Mathematics.Color;
		static readonly ForestGreen: Stride.Core.Mathematics.Color;
		static readonly Fuchsia: Stride.Core.Mathematics.Color;
		static readonly Gainsboro: Stride.Core.Mathematics.Color;
		static readonly GhostWhite: Stride.Core.Mathematics.Color;
		static readonly Gold: Stride.Core.Mathematics.Color;
		static readonly Goldenrod: Stride.Core.Mathematics.Color;
		static readonly Gray: Stride.Core.Mathematics.Color;
		static readonly Green: Stride.Core.Mathematics.Color;
		static readonly GreenYellow: Stride.Core.Mathematics.Color;
		static readonly Honeydew: Stride.Core.Mathematics.Color;
		static readonly HotPink: Stride.Core.Mathematics.Color;
		static readonly IndianRed: Stride.Core.Mathematics.Color;
		static readonly Indigo: Stride.Core.Mathematics.Color;
		static readonly Ivory: Stride.Core.Mathematics.Color;
		static readonly Khaki: Stride.Core.Mathematics.Color;
		static readonly Lavender: Stride.Core.Mathematics.Color;
		static readonly LavenderBlush: Stride.Core.Mathematics.Color;
		static readonly LawnGreen: Stride.Core.Mathematics.Color;
		static readonly LemonChiffon: Stride.Core.Mathematics.Color;
		static readonly LightBlue: Stride.Core.Mathematics.Color;
		static readonly LightCoral: Stride.Core.Mathematics.Color;
		static readonly LightCyan: Stride.Core.Mathematics.Color;
		static readonly LightGoldenrodYellow: Stride.Core.Mathematics.Color;
		static readonly LightGray: Stride.Core.Mathematics.Color;
		static readonly LightGreen: Stride.Core.Mathematics.Color;
		static readonly LightPink: Stride.Core.Mathematics.Color;
		static readonly LightSalmon: Stride.Core.Mathematics.Color;
		static readonly LightSeaGreen: Stride.Core.Mathematics.Color;
		static readonly LightSkyBlue: Stride.Core.Mathematics.Color;
		static readonly LightSlateGray: Stride.Core.Mathematics.Color;
		static readonly LightSteelBlue: Stride.Core.Mathematics.Color;
		static readonly LightYellow: Stride.Core.Mathematics.Color;
		static readonly Lime: Stride.Core.Mathematics.Color;
		static readonly LimeGreen: Stride.Core.Mathematics.Color;
		static readonly Linen: Stride.Core.Mathematics.Color;
		static readonly Magenta: Stride.Core.Mathematics.Color;
		static readonly Maroon: Stride.Core.Mathematics.Color;
		static readonly MediumAquamarine: Stride.Core.Mathematics.Color;
		static readonly MediumBlue: Stride.Core.Mathematics.Color;
		static readonly MediumOrchid: Stride.Core.Mathematics.Color;
		static readonly MediumPurple: Stride.Core.Mathematics.Color;
		static readonly MediumSeaGreen: Stride.Core.Mathematics.Color;
		static readonly MediumSlateBlue: Stride.Core.Mathematics.Color;
		static readonly MediumSpringGreen: Stride.Core.Mathematics.Color;
		static readonly MediumTurquoise: Stride.Core.Mathematics.Color;
		static readonly MediumVioletRed: Stride.Core.Mathematics.Color;
		static readonly MidnightBlue: Stride.Core.Mathematics.Color;
		static readonly MintCream: Stride.Core.Mathematics.Color;
		static readonly MistyRose: Stride.Core.Mathematics.Color;
		static readonly Moccasin: Stride.Core.Mathematics.Color;
		static readonly NavajoWhite: Stride.Core.Mathematics.Color;
		static readonly Navy: Stride.Core.Mathematics.Color;
		static readonly OldLace: Stride.Core.Mathematics.Color;
		static readonly Olive: Stride.Core.Mathematics.Color;
		static readonly OliveDrab: Stride.Core.Mathematics.Color;
		static readonly Orange: Stride.Core.Mathematics.Color;
		static readonly OrangeRed: Stride.Core.Mathematics.Color;
		static readonly Orchid: Stride.Core.Mathematics.Color;
		static readonly PaleGoldenrod: Stride.Core.Mathematics.Color;
		static readonly PaleGreen: Stride.Core.Mathematics.Color;
		static readonly PaleTurquoise: Stride.Core.Mathematics.Color;
		static readonly PaleVioletRed: Stride.Core.Mathematics.Color;
		static readonly PapayaWhip: Stride.Core.Mathematics.Color;
		static readonly PeachPuff: Stride.Core.Mathematics.Color;
		static readonly Peru: Stride.Core.Mathematics.Color;
		static readonly Pink: Stride.Core.Mathematics.Color;
		static readonly Plum: Stride.Core.Mathematics.Color;
		static readonly PowderBlue: Stride.Core.Mathematics.Color;
		static readonly Purple: Stride.Core.Mathematics.Color;
		static readonly Red: Stride.Core.Mathematics.Color;
		static readonly RosyBrown: Stride.Core.Mathematics.Color;
		static readonly RoyalBlue: Stride.Core.Mathematics.Color;
		static readonly SaddleBrown: Stride.Core.Mathematics.Color;
		static readonly Salmon: Stride.Core.Mathematics.Color;
		static readonly SandyBrown: Stride.Core.Mathematics.Color;
		static readonly SeaGreen: Stride.Core.Mathematics.Color;
		static readonly SeaShell: Stride.Core.Mathematics.Color;
		static readonly Sienna: Stride.Core.Mathematics.Color;
		static readonly Silver: Stride.Core.Mathematics.Color;
		static readonly SkyBlue: Stride.Core.Mathematics.Color;
		static readonly SlateBlue: Stride.Core.Mathematics.Color;
		static readonly SlateGray: Stride.Core.Mathematics.Color;
		static readonly Snow: Stride.Core.Mathematics.Color;
		static readonly SpringGreen: Stride.Core.Mathematics.Color;
		static readonly SteelBlue: Stride.Core.Mathematics.Color;
		static readonly Tan: Stride.Core.Mathematics.Color;
		static readonly Teal: Stride.Core.Mathematics.Color;
		static readonly Thistle: Stride.Core.Mathematics.Color;
		static readonly Tomato: Stride.Core.Mathematics.Color;
		static readonly Turquoise: Stride.Core.Mathematics.Color;
		static readonly Violet: Stride.Core.Mathematics.Color;
		static readonly Wheat: Stride.Core.Mathematics.Color;
		static readonly White: Stride.Core.Mathematics.Color;
		static readonly WhiteSmoke: Stride.Core.Mathematics.Color;
		static readonly Yellow: Stride.Core.Mathematics.Color;
		static readonly YellowGreen: Stride.Core.Mathematics.Color;

		// Indexer:
		readonly Item: $Indexer_Color;

		// Methods:
		ToBgra(): number;

		ToRgba(): number;

		ToArgb(): number;

		ToAbgr(): number;

		ToArray(): number[];

		GetBrightness(): number;

		GetHue(): number;

		GetSaturation(): number;

		static Add(
			/*in*/ left: Stride.Core.Mathematics.Color,
			/*in*/ right: Stride.Core.Mathematics.Color,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static Add(
			left: Stride.Core.Mathematics.Color,
			right: Stride.Core.Mathematics.Color
		): Stride.Core.Mathematics.Color;

		static Subtract(
			/*in*/ left: Stride.Core.Mathematics.Color,
			/*in*/ right: Stride.Core.Mathematics.Color,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static Subtract(
			left: Stride.Core.Mathematics.Color,
			right: Stride.Core.Mathematics.Color
		): Stride.Core.Mathematics.Color;

		static Modulate(
			/*in*/ left: Stride.Core.Mathematics.Color,
			/*in*/ right: Stride.Core.Mathematics.Color,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static Modulate(
			left: Stride.Core.Mathematics.Color,
			right: Stride.Core.Mathematics.Color
		): Stride.Core.Mathematics.Color;

		static Scale(
			/*in*/ value: Stride.Core.Mathematics.Color,
			scale: number,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static Scale(
			value: Stride.Core.Mathematics.Color,
			scale: number
		): Stride.Core.Mathematics.Color;

		static Negate(
			/*in*/ value: Stride.Core.Mathematics.Color,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static Negate(
			value: Stride.Core.Mathematics.Color
		): Stride.Core.Mathematics.Color;

		static Clamp(
			/*in*/ value: Stride.Core.Mathematics.Color,
			/*in*/ min: Stride.Core.Mathematics.Color,
			/*in*/ max: Stride.Core.Mathematics.Color,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static FromBgra(
			color: number
		): Stride.Core.Mathematics.Color;

		static FromBgra(
			color: number
		): Stride.Core.Mathematics.Color;

		static FromAbgr(
			color: number
		): Stride.Core.Mathematics.Color;

		static FromAbgr(
			color: number
		): Stride.Core.Mathematics.Color;

		static FromRgba(
			color: number
		): Stride.Core.Mathematics.Color;

		static FromRgba(
			color: number
		): Stride.Core.Mathematics.Color;

		static Clamp(
			value: Stride.Core.Mathematics.Color,
			min: Stride.Core.Mathematics.Color,
			max: Stride.Core.Mathematics.Color
		): Stride.Core.Mathematics.Color;

		static Lerp(
			/*in*/ start: Stride.Core.Mathematics.Color,
			/*in*/ end: Stride.Core.Mathematics.Color,
			amount: number,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static Lerp(
			start: Stride.Core.Mathematics.Color,
			end: Stride.Core.Mathematics.Color,
			amount: number
		): Stride.Core.Mathematics.Color;

		static SmoothStep(
			/*in*/ start: Stride.Core.Mathematics.Color,
			/*in*/ end: Stride.Core.Mathematics.Color,
			amount: number,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static SmoothStep(
			start: Stride.Core.Mathematics.Color,
			end: Stride.Core.Mathematics.Color,
			amount: number
		): Stride.Core.Mathematics.Color;

		static Max(
			/*in*/ left: Stride.Core.Mathematics.Color,
			/*in*/ right: Stride.Core.Mathematics.Color,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static Max(
			left: Stride.Core.Mathematics.Color,
			right: Stride.Core.Mathematics.Color
		): Stride.Core.Mathematics.Color;

		static Min(
			/*in*/ left: Stride.Core.Mathematics.Color,
			/*in*/ right: Stride.Core.Mathematics.Color,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static Min(
			left: Stride.Core.Mathematics.Color,
			right: Stride.Core.Mathematics.Color
		): Stride.Core.Mathematics.Color;

		static AdjustContrast(
			/*in*/ value: Stride.Core.Mathematics.Color,
			contrast: number,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static AdjustContrast(
			value: Stride.Core.Mathematics.Color,
			contrast: number
		): Stride.Core.Mathematics.Color;

		static AdjustSaturation(
			/*in*/ value: Stride.Core.Mathematics.Color,
			saturation: number,
			/*out*/ result: Stride.Core.Mathematics.Color
		): void;

		static AdjustSaturation(
			value: Stride.Core.Mathematics.Color,
			saturation: number
		): Stride.Core.Mathematics.Color;

		Equals(
			other: Stride.Core.Mathematics.Color
		): boolean;

		// Default parameterless constructor for value types
		constructor();
	}

	/** This service type explains ClearScript access to .Net indexers. */
	abstract class $Indexer_Color {
		/** [ index: number ] -> number */
		public get(
			index: number
		): number;

		/** [ index: number ] <- number */
		public set(
			index: number,
			value: number
		): void;
	}
}
//#endregion

//#region Types shorthand
// ----------------------------------------------------- //
// ---------========= Types shorthand =========--------- //
// ----------------------------------------------------- //
/*
export const Rectangle = Stride.Core.Mathematics.Rectangle;
export type Rectangle = Stride.Core.Mathematics.Rectangle;
export const Vector2 = Stride.Core.Mathematics.Vector2;
export type Vector2 = Stride.Core.Mathematics.Vector2;
export const Color = Stride.Core.Mathematics.Color;
export type Color = Stride.Core.Mathematics.Color;
*/
//#endregion
